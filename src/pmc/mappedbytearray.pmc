/*
Copyright (C) 2010, Parrot Foundation.

=head1 NAME

src/pmc/mappedbytearray.pmc - Mapped byte array

=head1 DESCRIPTION

A memory mapped file or shared memory segment accesible as array of bytes.

Bare minimal functionality available, only for posix platforms
(tested on linux).

=cut

*/

#include "parrot/parrot.h"
#include "../src/io/io_private.h"

#ifdef PARROT_HAS_HEADER_SYSMMAN
#    include <sys/mman.h>
#    define ENABLED
#endif

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */

PARROT_DOES_NOT_RETURN
static void unavailable(PARROT_INTERP, ARGIN(const char *msg))
        __attribute__nonnull__(1)
        __attribute__nonnull__(2);

#define ASSERT_ARGS_unavailable __attribute__unused__ int _ASSERT_ARGS_CHECK = (\
       PARROT_ASSERT_ARG(interp) \
    , PARROT_ASSERT_ARG(msg))
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */
/* HEADERIZER END: static */


pmclass MappedByteArray auto_attrs {
    ATTR unsigned char *buffer;
    ATTR UINTVAL size;

/*

=head2 Vtable Functions

=over 4

=item C<init>

Invalid init without args for a now.

=item C<init_pmc>

The argument must be a String PMC with a file name. Maps the whole file.

Other options still not available.

=item C<destroy>

Free all resources used.

=cut

*/

    VTABLE void init() {
        #ifdef ENABLED
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "testing");
        #else
        unavailable(INTERP, "MappedByteArray");
        #endif
    }

    VTABLE void init_pmc(PMC * init) {
        #ifdef ENABLED
        if (VTABLE_isa(INTERP, init, CONST_STRING(INTERP, "String"))) {
            off_t length;
            void *mapping;
            STRING *name = VTABLE_get_string(INTERP, init);
            char * name_str = Parrot_str_to_cstring(INTERP, name);
            int handle = open(name_str, O_RDONLY);
            Parrot_str_free_cstring(name_str);
            if (handle == -1)
                Parrot_ex_throw_from_c_args(INTERP, NULL,
                        EXCEPTION_INVALID_OPERATION,
                        "cannot open file '%Ss'", name);
            length = lseek(handle, 0, SEEK_END);
            mapping = mmap(0, length, PROT_READ, MAP_PRIVATE, handle, 0);
            close(handle);
            if (mapping == NULL || mapping == (void *)-1)
                Parrot_ex_throw_from_c_args(INTERP, NULL,
                        EXCEPTION_INVALID_OPERATION,
                        "cannot mmap file '%Ss': %s", name, strerror(errno));
            PObj_custom_destroy_SET(SELF);
            SET_ATTR_size(INTERP, SELF, length);
            SET_ATTR_buffer(INTERP, SELF, (unsigned char*)mapping);
        }
        else {
            unavailable(INTERP, "*feature unknown or not implemented yet*");
        }
        #else
        unavailable(INTERP, "MappedByteArray");
        #endif
    }

    VTABLE void destroy() {
        #ifdef ENABLED
        unsigned char *buffer;
        UINTVAL size;
        GET_ATTR_size(INTERP, SELF, size);
        GET_ATTR_buffer(INTERP, SELF, buffer);
        if (size > 0) {
            munmap(buffer, size);
        }
        #endif
    }

/*

=item C<elements>

Return the size of the mapped area.

=cut

*/

    VTABLE INTVAL elements() {
        UINTVAL size;
        GET_ATTR_size(INTERP, SELF, size);
        return size;
    }


/*

=item C<get_integer_keyed_int>

Get a byte.

=cut

*/

    VTABLE INTVAL get_integer_keyed_int(INTVAL pos) {
        UINTVAL size;
        unsigned char *buffer;
        GET_ATTR_size(INTERP, SELF, size);
        if (size <= 0)
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                    EXCEPTION_INVALID_OPERATION,
                    "not mapped");
        GET_ATTR_buffer(INTERP, SELF, buffer);
        return buffer[pos];
    }


/*

=back

=cut

*/

} /* pmclass end */

/*

=head2 Helper functions

=over 4

=item unavailable()

Throws appropiately for functionality not available in the current platform.

=cut

*/

PARROT_DOES_NOT_RETURN
static void
unavailable(PARROT_INTERP, ARGIN(const char *msg))
{
    Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_UNIMPLEMENTED,
            "%s not implemented in this platform", msg);
}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
